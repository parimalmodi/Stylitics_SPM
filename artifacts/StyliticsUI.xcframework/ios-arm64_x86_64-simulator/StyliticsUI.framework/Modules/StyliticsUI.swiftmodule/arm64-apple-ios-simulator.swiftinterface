// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name StyliticsUI
// swift-module-flags-ignorable: -enable-bare-slash-regex
import DeveloperToolsSupport
import Foundation
import SafariServices
import StyliticsData
@_exported import StyliticsUI
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers final public class StyliticsUIApis {
  public static func load(outfits: StyliticsData.Outfits, outfitsTemplate: StyliticsUI.OutfitsTemplate, displayProductListFromSDK: Swift.Bool = true, productListScreenTemplate: StyliticsUI.ProductListScreenTemplate = .standard()) -> UIKit.UIView
  public static func load(outfit: StyliticsData.Outfit, productListTemplate: StyliticsUI.ProductListTemplate) -> UIKit.UIView
  public static func closeProductListScreen(requestId: Swift.String)
  public static func clearData(for requestId: Swift.String)
  @objc deinit
}
public enum ProductListScreenTemplate {
  case standard(productListScreenConfig: StyliticsUI.ProductListScreenConfig = ProductListScreenConfig())
}
public struct ClassicConfig {
  public init(widget: StyliticsUI.ClassicConfig.Widget = Widget(), topLabel: StyliticsUI.TopLabel = TopLabel(), bottomLabel: StyliticsUI.ClassicConfig.BottomLabel = BottomLabel(), shopTheModel: StyliticsUI.ShopTheModel = ShopTheModel())
  public struct Widget {
    public init(borderColor: UIKit.UIColor = ClassicConfigColor.classicWidgetBorderColor.toUIColor, borderWeight: CoreFoundation.CGFloat = 1, cornerRadius: CoreFoundation.CGFloat = 8, backgroundColor: UIKit.UIColor = ClassicConfigColor.classicWidgetBackgroundColor.toUIColor, widgetTopSpacing: CoreFoundation.CGFloat = 37.5)
  }
  public struct BottomLabel {
    public init(title: Swift.String = Constants.VIEW_DETAIL_TEXT, fontFamilyAndWeight: Swift.String = "HelveticaNeue", fontSize: CoreFoundation.CGFloat = 14, fontColor: UIKit.UIColor = ClassicConfigColor.classicBottomLabelFontColor.toUIColor, showUnderline: Swift.Bool = true, backgroundColor: UIKit.UIColor = .clear, borderColor: UIKit.UIColor = UIColor(red: 0.882,
                                                   green: 0.882,
                                                   blue: 0.882,
                                                   alpha: 1), borderWeight: CoreFoundation.CGFloat = 0, cornerRadius: CoreFoundation.CGFloat = 0, paddingVertical: CoreFoundation.CGFloat = 0, paddingHorizontal: CoreFoundation.CGFloat = 0, bottomSpacing: CoreFoundation.CGFloat = 24)
  }
}
public enum TopLabelPosition {
  case topLeft
  case topRight
  public static func == (a: StyliticsUI.TopLabelPosition, b: StyliticsUI.TopLabelPosition) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct ProductListConfig {
  public init(itemName: StyliticsUI.ProductListConfig.ItemName = ItemName(), brandName: StyliticsUI.ProductListConfig.BrandName = BrandName(), itemPrice: StyliticsUI.ProductListConfig.ItemPrice = ItemPrice(), shop: StyliticsUI.ProductListConfig.ShopViewType = .text(), seeMoreOptions: StyliticsUI.ProductListConfig.SeeMoreOptions = SeeMoreOptions(), itemBackgroundColor: UIKit.UIColor = StandardProductListConfigColor.standardProductListItemBackgroundColor.toUIColor, itemDividerColor: UIKit.UIColor = StandardProductListConfigColor.standardProductListItemDividerColor.toUIColor, hideAnchorItem: Swift.Bool? = nil)
  public struct ItemName {
    public init(fontFamilyAndWeight: Swift.String = "HelveticaNeue-medium", fontSize: CoreFoundation.CGFloat = 16, fontColor: UIKit.UIColor = StandardProductListConfigColor.standardProductListItemNameFontColor.toUIColor, titleTextTransform: StyliticsUI.ProductListConfig.TitleTextTransform? = nil)
  }
  public struct BrandName {
    public init(showBrand: Swift.Bool = false, fontFamilyAndWeight: Swift.String = "HelveticaNeue-medium", fontSize: CoreFoundation.CGFloat = 16, fontColor: UIKit.UIColor = StandardProductListConfigColor.standardProductListBrandNameFontColor.toUIColor)
  }
  public struct ItemPrice {
    public init(fontFamilyAndWeight: Swift.String = "HelveticaNeue-medium", fontSize: CoreFoundation.CGFloat = 16, priceFontColor: UIKit.UIColor = StandardProductListConfigColor.standardProductListItemPriceFontColor.toUIColor, salePriceFontColor: UIKit.UIColor = StandardProductListConfigColor.standardProductListItemSalePriceFontColor.toUIColor, strikeThroughPriceFontColor: UIKit.UIColor = StandardProductListConfigColor.standardProductListStrikeThroughPriceFontColor.toUIColor, style: StyliticsUI.ProductListConfig.PriceStrikethrough = .show, swapPricesPosition: Swift.Bool = false, decimal: Swift.Int = 2)
  }
  public struct ShopText {
    public init(title: Swift.String = Constants.SHOP_TEXT, fontFamilyAndWeight: Swift.String = "HelveticaNeue-medium", fontSize: CoreFoundation.CGFloat = 14, fontColor: UIKit.UIColor = StandardProductListConfigColor.standardProductListShopTextFontColor.toUIColor, position: StyliticsUI.ProductListConfig.ShopViewPosition = .left)
  }
  public struct ShopButton {
    public init(title: Swift.String = Constants.SHOP_TEXT, fontFamilyAndWeight: Swift.String = "HelveticaNeue-medium", fontSize: CoreFoundation.CGFloat = 14, fontColor: UIKit.UIColor = StandardProductListConfigColor.standardProductListShopButtonFontColor.toUIColor, backgroundColor: UIKit.UIColor = StandardProductListConfigColor.standardProductListShopButtonBackgroundColor.toUIColor, horizontalPadding: CoreFoundation.CGFloat = 16, verticalPadding: CoreFoundation.CGFloat = 8)
  }
  public struct SeeMoreOptions {
    public init(title: Swift.String = Constants.SEE_MORE_OPTIONS_TEXT, fontFamilyAndWeight: Swift.String = "HelveticaNeue", fontSize: CoreFoundation.CGFloat = 12, fontColor: UIKit.UIColor = StandardProductListConfigColor.standardProductListSeeMoreFontColor.toUIColor)
  }
  public enum ShopViewPosition {
    case left
    case right
    public static func == (a: StyliticsUI.ProductListConfig.ShopViewPosition, b: StyliticsUI.ProductListConfig.ShopViewPosition) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum ShopViewType {
    case text(_: StyliticsUI.ProductListConfig.ShopText = ShopText())
    case button(_: StyliticsUI.ProductListConfig.ShopButton = ShopButton())
  }
  public enum PriceStrikethrough {
    case show
    case hide
    public static func == (a: StyliticsUI.ProductListConfig.PriceStrikethrough, b: StyliticsUI.ProductListConfig.PriceStrikethrough) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum TitleTextTransform {
    case upper
    public static func == (a: StyliticsUI.ProductListConfig.TitleTextTransform, b: StyliticsUI.ProductListConfig.TitleTextTransform) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public enum ShopTheModelPosition {
  case topLeft
  case topRight
  case bottomLeft
  case bottomRight
  public static func == (a: StyliticsUI.ShopTheModelPosition, b: StyliticsUI.ShopTheModelPosition) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ClassicConfigColor : Swift.String {
  case classicWidgetBackgroundColor
  case classicWidgetBorderColor
  case classicBottomLabelFontColor
  case classicBottomLabelBackgroundColor
  public var toUIColor: UIKit.UIColor {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum StandardProductListConfigColor : Swift.String {
  case standardProductListItemListHeaderTitleFontColor
  case standardProductListItemNameFontColor
  case standardProductListBrandNameFontColor
  case standardProductListItemPriceFontColor
  case standardProductListItemSalePriceFontColor
  case standardProductListStrikeThroughPriceFontColor
  case standardProductListShopTextFontColor
  case standardProductListShopButtonFontColor
  case standardProductListSeeMoreFontColor
  case standardProductListShopButtonBackgroundColor
  case standardProductListItemBackgroundColor
  case standardProductListItemDividerColor
  public var toUIColor: UIKit.UIColor {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum HotspotConfigColor : Swift.String {
  case widgetBackgroundColor
  case widgetBorderColor
  case infoLabelTitleFontColor
  case infoLabelPriceFontColor
  case infoLabelBackgroundColor
  case shopTheLookFontColor
  case iconBackgroundColor
  public var toUIColor: UIKit.UIColor {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct ReplacementInfo {
  public let replacementItem: StyliticsData.ReplacementItem
  public let position: Swift.Int
  public init(replacementItem: StyliticsData.ReplacementItem, position: Swift.Int)
}
final public class ProductListListener {
  public init(onOutfitItemClick: ((StyliticsUI.OutfitInfo, StyliticsUI.OutfitItemInfo) -> Swift.Void)? = nil, onOutfitItemView: ((StyliticsUI.OutfitInfo, StyliticsUI.OutfitItemInfo) -> Swift.Void)? = nil, onItemSwap: ((Swift.Int, Swift.Int, Swift.Int) -> Swift.Void)? = nil)
  @objc deinit
}
public struct ProductListScreenConfig {
  public init(itemListHeader: StyliticsUI.ProductListScreenConfig.ItemListHeader = ItemListHeader(), productListConfig: StyliticsUI.ProductListConfig = ProductListConfig(), productListListener: StyliticsUI.ProductListListener = ProductListListener(), presentationStyle: UIKit.UIModalPresentationStyle = .automatic, showScrollBar: Swift.Bool = false)
  public enum ProductListScreenHeaderAlign {
    case top
    case centre
    public static func == (a: StyliticsUI.ProductListScreenConfig.ProductListScreenHeaderAlign, b: StyliticsUI.ProductListScreenConfig.ProductListScreenHeaderAlign) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct ItemListHeader {
    public init(title: Swift.String = "Product List", productListScreenHeaderAlign: StyliticsUI.ProductListScreenConfig.ProductListScreenHeaderAlign = .top, fontFamilyAndWeight: Swift.String = "HelveticaNeue-medium", fontSize: CoreFoundation.CGFloat = 16, fontColor: UIKit.UIColor = StandardProductListConfigColor.standardProductListItemListHeaderTitleFontColor.toUIColor)
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class ProductListContainerView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension StyliticsUI.ProductListContainerView : UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
extension StyliticsUI.ProductListContainerView : UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
@_hasMissingDesignatedInitializers final public class Constants {
  public static let MINIMALIST_TEXT: Swift.String
  public static let VIEW_DETAIL_TEXT: Swift.String
  public static let SHOP_TEXT: Swift.String
  public static let SEE_MORE_OPTIONS_CLOSE_TEXT: Swift.String
  public static let SEE_MORE_OPTIONS_TEXT: Swift.String
  public static let NIKE_DOTS_ITEM_HEADER_TITLE: Swift.String
  public static let NIKE_DOTS_VIEW_ENTIRE_LOOK_TEXT: Swift.String
  public static let NIKE_DOTS_SHOP_THE_MODEL_TEXT: Swift.String
  public static let SHOP_THE_LOOK_TEXT: Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class ClassicDisplayContainerView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension StyliticsUI.ClassicDisplayContainerView : UIKit.UICollectionViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
}
extension StyliticsUI.ClassicDisplayContainerView : UIKit.UICollectionViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
extension StyliticsUI.ClassicDisplayContainerView : UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumLineSpacingForSectionAt section: Swift.Int) -> CoreFoundation.CGFloat
}
public struct HotspotListener {
  public init(onClick: ((StyliticsUI.OutfitInfo) -> Swift.Void)? = nil, onView: ((StyliticsUI.OutfitInfo) -> Swift.Void)? = nil, onOutfitItemClick: ((StyliticsUI.OutfitInfo, StyliticsUI.OutfitItemInfo) -> Swift.Void)? = nil)
}
public struct TopLabel {
  public init(label1: StyliticsUI.TopLabel.Label1 = Label1(), label2: StyliticsUI.TopLabel.Label2 = Label2(), label3: StyliticsUI.TopLabel.Label3 = Label3(), label4: StyliticsUI.TopLabel.Label4 = Label4(), label5: StyliticsUI.TopLabel.Label5 = Label5(), label6: StyliticsUI.TopLabel.Label6 = Label6(), label7: StyliticsUI.TopLabel.Label7 = Label7())
  public struct Label1 {
    public init(fontFamilyAndWeight: Swift.String = "HelveticaNeue", fontSize: CoreFoundation.CGFloat = 14, fontColor: UIKit.UIColor = UIColor(red: 33/255,
                                                 green: 33/255,
                                                 blue: 33/255,
                                                 alpha: 1), backgroundColor: UIKit.UIColor = .white, borderColor: UIKit.UIColor = UIColor(red: 142/255,
                                                   green: 57/255,
                                                   blue: 227/255,
                                                   alpha: 1), borderWeight: CoreFoundation.CGFloat = 2, cornerRadius: CoreFoundation.CGFloat = 15, position: StyliticsUI.TopLabelPosition = .topLeft, paddingVertical: CoreFoundation.CGFloat = 6, paddingHorizontal: CoreFoundation.CGFloat = 16)
  }
  public struct Label2 {
    public init(fontFamilyAndWeight: Swift.String = "HelveticaNeue-bold", fontSize: CoreFoundation.CGFloat = 14, fontColor: UIKit.UIColor = .white, backgroundColor: UIKit.UIColor = .black, cornerRadius: CoreFoundation.CGFloat = 0, position: StyliticsUI.TopLabelPosition = .topLeft, paddingVertical: CoreFoundation.CGFloat = 6, paddingHorizontal: CoreFoundation.CGFloat = 16, iconAndTitleSpacing: CoreFoundation.CGFloat = 8)
  }
  public struct Label3 {
    public init(fontFamilyAndWeight: Swift.String = "HelveticaNeue-light", fontSize: CoreFoundation.CGFloat = 16, fontColor: UIKit.UIColor = .black, backgroundColor: UIKit.UIColor = .white, cornerRadius: CoreFoundation.CGFloat = 8, shadowColor: UIKit.UIColor = UIColor(red: 0,
                                                   green: 0,
                                                   blue: 0,
                                                   alpha: 0.16), shadowRadius: CoreFoundation.CGFloat = 4, position: StyliticsUI.TopLabelPosition = .topLeft, paddingVertical: CoreFoundation.CGFloat = 8, paddingHorizontal: CoreFoundation.CGFloat = 12)
  }
  public struct Label4 {
    public init(fontFamilyAndWeight: Swift.String = "HelveticaNeue", fontSize: CoreFoundation.CGFloat = 12, fontColor: UIKit.UIColor = .white, backgroundColorBeforeAnimation: UIKit.UIColor = UIColor(red: 45/255,
                                                                      green: 74/255,
                                                                      blue: 85/255,
                                                                      alpha: 1), backgroundColorAfterAnimation: UIKit.UIColor = UIColor(red: 43/255,
                                                                     green: 75/255,
                                                                     blue: 117/255,
                                                                     alpha: 1), cornerRadius: CoreFoundation.CGFloat = 6, shadowColor: UIKit.UIColor = UIColor(red: 0,
                                                   green: 0,
                                                   blue: 0,
                                                   alpha: 0.16), shadowRadius: CoreFoundation.CGFloat = 4, position: StyliticsUI.TopLabelPosition = .topLeft, paddingVertical: CoreFoundation.CGFloat = 12, paddingHorizontal: CoreFoundation.CGFloat = 12)
  }
  public struct Label5 {
    public init(fontFamilyAndWeight: Swift.String = "HelveticaNeue-medium", fontSize: CoreFoundation.CGFloat = 14, fontColor: UIKit.UIColor = UIColor(red: 71/255,
                                                 green: 0,
                                                 blue: 171/255,
                                                 alpha: 1), backgroundColor: UIKit.UIColor = UIColor(red: 235/255,
                                                       green: 236/255,
                                                       blue: 254/255,
                                                       alpha: 1), cornerRadius: CoreFoundation.CGFloat = 15, position: StyliticsUI.TopLabelPosition = .topLeft, paddingVertical: CoreFoundation.CGFloat = 8, paddingHorizontal: CoreFoundation.CGFloat = 16)
  }
  public struct Label6 {
    public init(fontFamilyAndWeight: Swift.String = "HelveticaNeue-bold", fontSize: CoreFoundation.CGFloat = 16, fontColor: UIKit.UIColor = UIColor(red: 30/255,
                                                 green: 30/255,
                                                 blue: 30/255,
                                                 alpha: 1), backgroundColorBeforeAnimation: UIKit.UIColor = .white, backgroundColorAfterAnimation: UIKit.UIColor = .white, cornerRadius: CoreFoundation.CGFloat = 32, shadowColor: UIKit.UIColor = UIColor(red: 0,
                                                   green: 0,
                                                   blue: 0,
                                                   alpha: 0.05), shadowRadius: CoreFoundation.CGFloat = 10, shadowOffset: CoreFoundation.CGSize = CGSize(width: 0,
                                                  height: 4), position: StyliticsUI.TopLabelPosition = .topLeft, paddingVertical: CoreFoundation.CGFloat = 12, paddingHorizontal: CoreFoundation.CGFloat = 22)
  }
  public struct Label7 {
    public init(fontFamilyAndWeight: Swift.String = "HelveticaNeue-medium", fontSize: CoreFoundation.CGFloat = 14, fontColor: UIKit.UIColor = UIColor(red: 30/255,
                                                 green: 30/255,
                                                 blue: 30/255,
                                                 alpha: 1), position: StyliticsUI.TopLabelPosition = .topLeft, iconAndTitleSpacing: CoreFoundation.CGFloat = 8, iconColor: UIKit.UIColor = .black)
  }
}
public enum ProductListScreenState {
  case disable
  case enable(productListScreenConfig: StyliticsUI.ProductListScreenConfig = ProductListScreenConfig())
}
public struct HotspotConfig {
  public init(widget: StyliticsUI.HotspotConfig.Widget = Widget(), infoLabel: StyliticsUI.HotspotConfig.InfoLabel = InfoLabel(), shopTheLook: StyliticsUI.HotspotConfig.ShopTheLook = ShopTheLook(), topLabel: StyliticsUI.TopLabel = TopLabel())
  public struct ShopTheLook {
    public init(title: Swift.String = Constants.SHOP_THE_LOOK_TEXT, fontFamilyAndWeight: Swift.String = "HelveticaNeue-medium", fontSize: CoreFoundation.CGFloat = 12, fontColor: UIKit.UIColor = HotspotConfigColor.shopTheLookFontColor.toUIColor)
  }
  public struct InfoLabel {
    public init(fontFamilyAndWeight: Swift.String = "HelveticaNeue", fontSize: CoreFoundation.CGFloat = 12, titleFontColor: UIKit.UIColor = HotspotConfigColor.infoLabelTitleFontColor.toUIColor, priceFontColor: UIKit.UIColor = HotspotConfigColor.infoLabelPriceFontColor.toUIColor, cornerRadius: CoreFoundation.CGFloat = 8, backgroundColor: UIKit.UIColor = HotspotConfigColor.infoLabelBackgroundColor.toUIColor)
  }
  public struct Widget {
    public init(borderColor: UIKit.UIColor = .red, borderWeight: CoreFoundation.CGFloat = 1, cornerRadius: CoreFoundation.CGFloat = 8, backgroundColor: UIKit.UIColor = .blue)
  }
}
public enum OutfitsTemplate {
  case classic(classicConfig: StyliticsUI.ClassicConfig = ClassicConfig(), classicListener: StyliticsUI.ClassicListener? = nil, isItemSwapEnabled: Swift.Bool = false, showScrollBar: Swift.Bool = false)
  case hotspot(hotspotConfig: StyliticsUI.HotspotConfig = HotspotConfig(), hotspotListener: StyliticsUI.HotspotListener = HotspotListener(), showScrollBar: Swift.Bool = false)
}
public struct OutfitItemInfo {
  public let outfitItem: StyliticsData.OutfitItem
  public let position: Swift.Int
}
final public class ClassicListener {
  public init(onClick: ((StyliticsUI.OutfitInfo) -> Swift.Void)? = nil, onView: ((StyliticsUI.OutfitInfo) -> Swift.Void)? = nil, onItemSwap: ((Swift.Int, Swift.Int, Swift.Int) -> Swift.Void)? = nil)
  @objc deinit
}
public enum ProductListTemplate {
  case standard(productListConfig: StyliticsUI.ProductListConfig = ProductListConfig(), productListListener: StyliticsUI.ProductListListener? = nil, showScrollBar: Swift.Bool = false)
}
public struct OutfitInfo {
  public let outfit: StyliticsData.Outfit
  public let position: Swift.Int
}
public struct ShopTheModel {
  public init(name: Swift.String = "", position: StyliticsUI.ShopTheModelPosition = .topLeft, width: CoreFoundation.CGFloat = 60, height: CoreFoundation.CGFloat = 60)
}
extension StyliticsUI.TopLabelPosition : Swift.Equatable {}
extension StyliticsUI.TopLabelPosition : Swift.Hashable {}
extension StyliticsUI.ProductListConfig.ShopViewPosition : Swift.Equatable {}
extension StyliticsUI.ProductListConfig.ShopViewPosition : Swift.Hashable {}
extension StyliticsUI.ProductListConfig.PriceStrikethrough : Swift.Equatable {}
extension StyliticsUI.ProductListConfig.PriceStrikethrough : Swift.Hashable {}
extension StyliticsUI.ProductListConfig.TitleTextTransform : Swift.Equatable {}
extension StyliticsUI.ProductListConfig.TitleTextTransform : Swift.Hashable {}
extension StyliticsUI.ShopTheModelPosition : Swift.Equatable {}
extension StyliticsUI.ShopTheModelPosition : Swift.Hashable {}
extension StyliticsUI.ClassicConfigColor : Swift.Equatable {}
extension StyliticsUI.ClassicConfigColor : Swift.Hashable {}
extension StyliticsUI.ClassicConfigColor : Swift.RawRepresentable {}
extension StyliticsUI.StandardProductListConfigColor : Swift.Equatable {}
extension StyliticsUI.StandardProductListConfigColor : Swift.Hashable {}
extension StyliticsUI.StandardProductListConfigColor : Swift.RawRepresentable {}
extension StyliticsUI.HotspotConfigColor : Swift.Equatable {}
extension StyliticsUI.HotspotConfigColor : Swift.Hashable {}
extension StyliticsUI.HotspotConfigColor : Swift.RawRepresentable {}
extension StyliticsUI.ProductListScreenConfig.ProductListScreenHeaderAlign : Swift.Equatable {}
extension StyliticsUI.ProductListScreenConfig.ProductListScreenHeaderAlign : Swift.Hashable {}
